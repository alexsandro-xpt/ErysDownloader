//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;

namespace ErysDownloader
{
    public class ClassicProxy : IChannel, IProxyClient
    {
        public Uri Url { get; set; }
        public ITransport Transport { get; set; }

        public virtual Response SendRequest(Request request)
        {

            //IEnumerable<string> requestProxy = new[]
            //    {
            //        string.Format("GET {0} HTTP/1.1", string.Format("{0}:{1}", request.Url, request.Url.Port))
            //        , string.Format("Host: {0}", string.Format("{0}:{1}", request.Url, request.Url.Port))
            //        , "Proxy-Connection: Keep-Alive"
            //        , request.RequestHeader["User-Agent"]
            //    };

            if (this.Credencial != null)
            {
                request.RequestHeader["Proxy-Authorization"] = "Basic " + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}", Credencial.UserName, Credencial.Password)));
                //requestProxy = requestProxy.Concat(new[]
                //    {
                //        "Proxy-Authorization: Basic " +
                //        Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}", Credencial.UserName, Credencial.Password)))
                //    });
            }

            request.RequestHeader["Proxy-Connection"] = "Keep-Alive";
            //if (request.RequestHeader.ContainsKey("Connection")) request.RequestHeader.Remove("Connection");

            //request.RequestHeader = requestProxy;

            request.IsConnected = true;

            return Transport.ExecuteRequest(request);
        }

        public int Port { get; set; }
        public string Host { get; set; }
        public Credencial Credencial { get; set; }

        public virtual void Connect(System.IO.Stream session, IEnumerable<string> commandLine)
        {
            throw new System.NotImplementedException();
        }

    }
}
