//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ErysDownloader.Socket;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ErysDownloader
{
    public class ResponseHeaders : Dictionary<string, string>
    {
        internal virtual bool TransferEncoding
        {
            get;
            set;
        }

        internal virtual int ContentLength
        {
            get;
            set;
        }

        internal virtual int? Status
        {
            get;
            set;
        }

        internal virtual ContentEncoding ContentEncoding
        {
            get;
            set;
        }

        public Encoding CharSetEncoder { get; private set; }

        public ResponseHeaders()
        {
            ContentEncoding = ContentEncoding.Ascii;
            CharSetEncoder = Encoding.Default;
            ContentLength = -1;
        }

        internal new virtual void Add(string key, string value)
        {
            switch (key)
            {
                case "status":
                    Status = Convert.ToInt32(value);
                    break;
                case "content-encoding":
                    ContentEncoding = ContentEncoding.Ascii;
                    if (value == "gzip") ContentEncoding = ContentEncoding.Gzip;
                    else if (value == "deflate") ContentEncoding = ContentEncoding.Deflate;
                    break;
                case "content-length":
                    int len = -1;
                    int.TryParse(value, out len);
                    ContentLength = len;
                    break;
                case "transfer-encoding":
                    TransferEncoding = true;
                    break;
                case "content-type":
                    if (value.ToLower().Contains("charset"))
                    {
                        CharSetEncoder = Encoding.GetEncoding(value.Split(new string[] { "charset=" }, StringSplitOptions.None)[1].Split(new[] { ';' }, StringSplitOptions.None)[0].Trim());
                    }
                    break;
            }

            base.Add(key, value);
        }

        internal virtual bool IsValid()
        {

            if (Status == null)
            {
                throw new Exception("O servidor não aceitou o pedido e retornou uma lista de cabeçalho vazia.");
            }


            if (Status == 200 || Status == 404 || Status == 302 || Status == 301 || Status == 407)
            {
                string type = this.Keys.Contains("content-type") ? this["content-type"] : string.Empty;

                if ((type.StartsWith(@"text/") || Status == 404) && ContentLength != 0) return true;
            }


            return false;
        }

    }
}
