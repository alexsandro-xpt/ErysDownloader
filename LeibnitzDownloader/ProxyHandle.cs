//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace ErysDownloader
{
    public abstract class ProxyHandle : IProxyClient
    {
        protected virtual ProxyHandle Sucessor
        {
            get;
            set;
        }

        public virtual Stream HandleConnect(Stream session, string ua, Credencial outgoingCredencial)
        {
            var proxyUrl = new Uri(string.Format("http://{0}:{1}", Host, Port));

            IEnumerable<string> requestTunnelProxy = new[]
                                           {
                                               string.Format("CONNECT {0} HTTP/1.1", string.Format("{0}:{1}", proxyUrl.Host, proxyUrl.Port))
                                               , string.Format("Host: {0}", string.Format("{0}:{1}", proxyUrl.Host, proxyUrl.Port))
                                               , "Proxy-Connection: Keep-Alive"
                                               , string.Format("User-Agent: {0}", ua)
                                           };

            if (outgoingCredencial != null)
            {
                requestTunnelProxy = requestTunnelProxy.Concat(new[]
                {
                    "Proxy-Authorization: Basic " +
                    Convert.ToBase64String(
                        ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}"
                        , outgoingCredencial.UserName, outgoingCredencial.Password)))
                });
            }

            Connect(session, requestTunnelProxy);

            var myOutgoingCredencial = Credencial;

            if (Sucessor != null)
            {
                //Sucessor.Credencial = myOutgoingCredencial;

                session = Sucessor.HandleConnect(session, ua, myOutgoingCredencial);

                var yourOutgoingCredencial = Sucessor.Credencial;
                this.Credencial = yourOutgoingCredencial;
            }


            return session;
        }

        public int Port { get; set; }
        public string Host { get; set; }
        public Credencial Credencial { get; set; }

        public virtual void Connect(System.IO.Stream session, IEnumerable<string> commandLine)
        {
            Socket.StreamHandle.WriteLine(session, commandLine);
            var proxyResponse = Socket.StreamHandle.ReadLineText(session);
            var proxyStatus = proxyResponse != null && proxyResponse.Length > 11 ? proxyResponse.Substring(9, 3) : string.Empty;
            if (proxyStatus != "200")
            {
                var status = proxyResponse;
                var erroMessage = string.Empty;

                try
                {
                    do
                    {
                        erroMessage += proxyResponse;
                        proxyResponse = Socket.StreamHandle.ReadLineText(session);
                    } while (proxyResponse != null);

                }
                catch (Exception ex)
                {
                    throw new Exception("Proxy return: " + status);
                }
                throw new Exception(erroMessage);
            }
            Socket.StreamHandle.ReadLineText(session);
        }

    }
}
